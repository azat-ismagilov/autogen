from typing import Any, Dict, List, Union, TypedDict, overload

@overload
def input(filename: str, **kwargs: Any) -> "FFmpegInput": ...
@overload
def input(filename: str, loop: int, framerate: int, **kwargs: Any) -> "FFmpegInput": ...
def output(input: "FFmpegInput", filename: str, **kwargs: Any) -> "FFmpegOutput": ...
def probe(filename: str) -> "FFmpegProbeResult": ...

class FFmpegInput:
    def output(self, filename: str, **kwargs: Any) -> "FFmpegOutput": ...

class FFmpegOutput:
    def run(self, quiet: bool = False, **kwargs: Any) -> None: ...
    def overwrite_output(self) -> "FFmpegOutput": ...

class StreamInfo(TypedDict):
    duration: str

class FFmpegProbeResult(Dict[str, Any]):
    streams: List[Dict[str, Any]]

    def __getitem__(self, key: str) -> Union[List[Dict[str, Any]], Any]: ...

# Remove lambda functions as they're no longer necessary
